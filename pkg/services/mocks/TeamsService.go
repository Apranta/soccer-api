// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	models "soccer/pkg/models"

	mock "github.com/stretchr/testify/mock"
)

// TeamsService is an autogenerated mock type for the TeamsService type
type TeamsService struct {
	mock.Mock
}

// CreateTeam provides a mock function with given fields: ctx, team
func (_m *TeamsService) CreateTeam(ctx context.Context, team models.Team) (models.Team, error) {
	ret := _m.Called(ctx, team)

	var r0 models.Team
	if rf, ok := ret.Get(0).(func(context.Context, models.Team) models.Team); ok {
		r0 = rf(ctx, team)
	} else {
		r0 = ret.Get(0).(models.Team)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.Team) error); ok {
		r1 = rf(ctx, team)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTeam provides a mock function with given fields: ctx, id
func (_m *TeamsService) DeleteTeam(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTeam provides a mock function with given fields: ctx, id
func (_m *TeamsService) GetTeam(ctx context.Context, id int64) (models.Team, error) {
	ret := _m.Called(ctx, id)

	var r0 models.Team
	if rf, ok := ret.Get(0).(func(context.Context, int64) models.Team); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Team)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTeams provides a mock function with given fields: ctx
func (_m *TeamsService) ListTeams(ctx context.Context) ([]models.Team, error) {
	ret := _m.Called(ctx)

	var r0 []models.Team
	if rf, ok := ret.Get(0).(func(context.Context) []models.Team); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Team)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTeam provides a mock function with given fields: ctx, team
func (_m *TeamsService) UpdateTeam(ctx context.Context, team models.Team) (models.Team, error) {
	ret := _m.Called(ctx, team)

	var r0 models.Team
	if rf, ok := ret.Get(0).(func(context.Context, models.Team) models.Team); ok {
		r0 = rf(ctx, team)
	} else {
		r0 = ret.Get(0).(models.Team)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.Team) error); ok {
		r1 = rf(ctx, team)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
