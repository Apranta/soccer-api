// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	models "soccer/pkg/models"

	mock "github.com/stretchr/testify/mock"
)

// PlayersService is an autogenerated mock type for the PlayersService type
type PlayersService struct {
	mock.Mock
}

// CreatePlayer provides a mock function with given fields: ctx, player
func (_m *PlayersService) CreatePlayer(ctx context.Context, player models.Player) (models.Player, error) {
	ret := _m.Called(ctx, player)

	var r0 models.Player
	if rf, ok := ret.Get(0).(func(context.Context, models.Player) models.Player); ok {
		r0 = rf(ctx, player)
	} else {
		r0 = ret.Get(0).(models.Player)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.Player) error); ok {
		r1 = rf(ctx, player)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePlayer provides a mock function with given fields: ctx, id
func (_m *PlayersService) DeletePlayer(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPlayer provides a mock function with given fields: ctx, id
func (_m *PlayersService) GetPlayer(ctx context.Context, id int64) (models.Player, error) {
	ret := _m.Called(ctx, id)

	var r0 models.Player
	if rf, ok := ret.Get(0).(func(context.Context, int64) models.Player); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Player)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPlayers provides a mock function with given fields: ctx
func (_m *PlayersService) ListPlayers(ctx context.Context) ([]models.Player, error) {
	ret := _m.Called(ctx)

	var r0 []models.Player
	if rf, ok := ret.Get(0).(func(context.Context) []models.Player); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Player)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPlayersByTeams provides a mock function with given fields: ctx, team
func (_m *PlayersService) ListPlayersByTeams(ctx context.Context, team int64) ([]models.Player, error) {
	ret := _m.Called(ctx, team)

	var r0 []models.Player
	if rf, ok := ret.Get(0).(func(context.Context, int64) []models.Player); ok {
		r0 = rf(ctx, team)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Player)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, team)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePlayer provides a mock function with given fields: ctx, player
func (_m *PlayersService) UpdatePlayer(ctx context.Context, player models.Player) (models.Player, error) {
	ret := _m.Called(ctx, player)

	var r0 models.Player
	if rf, ok := ret.Get(0).(func(context.Context, models.Player) models.Player); ok {
		r0 = rf(ctx, player)
	} else {
		r0 = ret.Get(0).(models.Player)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.Player) error); ok {
		r1 = rf(ctx, player)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
